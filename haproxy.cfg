# Global settings
global
    log /dev/log local0
    chroot /var/haproxy
    pidfile /var/run/haproxy.pid
    maxconn 4096
    user haproxy
    group haproxy
    daemon

# Default settings
defaults
    log global
    timeout connect 5000
    timeout client 50000
    timeout server 50000

# Frontend for HTTP (port 80) - Redirect to HTTPS or serve static page
frontend http_frontend
    bind *:80
    mode http
    option httplog
    # Redirect to HTTPS for proxy domains, serve static page for others
    redirect scheme https code 301 if { hdr(host) -i proxy1.example.com } { hdr(host) -i proxy2.example.com }
    default_backend static_web_backend

# Frontend for HTTPS (port 443) - TLS termination for proxy domains + static page
frontend https_frontend
    bind *:443 ssl crt /usr/local/etc/letsencrypt/live/proxy1.example.com/proxy1.pem crt /usr/local/etc/letsencrypt/live/proxy2.example.com/proxy2.pem
    mode tcp
    option tcplog
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }  # Accept only TLS handshakes

    # Route non-Signal SNI (or no SNI) to static web backend
    use_backend static_web_backend if { req_ssl_sni -m end proxy1.example.com proxy2.example.com -m not } !{ req_ssl_sni -m found }
    
    # SNI-based routing for Signal proxy (for both domains)
    use_backend signal_service if { req_ssl_sni -i chat.signal.org }
    use_backend signal_service if { req_ssl_sni -i ud-chat.signal.org }
    use_backend signal_service if { req_ssl_sni -i textsecure-service.whispersystems.org }
    use_backend storage_service if { req_ssl_sni -i storage.signal.org }
    use_backend signal_cdn if { req_ssl_sni -i cdn.signal.org }
    use_backend signal_cdn2 if { req_ssl_sni -i cdn2.signal.org }
    use_backend directory if { req_ssl_sni -i api.directory.signal.org }
    use_backend cdsi if { req_ssl_sni -i cdsi.signal.org }
    use_backend content_proxy if { req_ssl_sni -i contentproxy.signal.org }
    use_backend uptime if { req_ssl_sni -i uptime.signal.org }
    use_backend backup if { req_ssl_sni -i api.backup.signal.org }
    use_backend sfu if { req_ssl_sni -i sfu.voip.signal.org }
    use_backend updates if { req_ssl_sni -i updates.signal.org }
    use_backend updates2 if { req_ssl_sni -i updates2.signal.org }
    default_backend relay_backend

# Relay backend (passes traffic to Signal servers)
backend relay_backend
    mode tcp
    server signal_relay chat.signal.org:443  # Adjust based on your relay needs

# Backend for the static webpage
backend static_web_backend
    mode http
    server static_server 127.0.0.1:8080

# Signal service backend
backend signal_service
    mode tcp
    server signal_server chat.signal.org:443

# Storage service backend
backend storage_service
    mode tcp
    server storage_server storage.signal.org:443

# CDN backends
backend signal_cdn
    mode tcp
    server cdn_server cdn.signal.org:443

backend signal_cdn2
    mode tcp
    server cdn2_server cdn2.signal.org:443

# Directory backend
backend directory
    mode tcp
    server directory_server api.directory.signal.org:443

# CDSI backend
backend cdsi
    mode tcp
    server cdsi_server cdsi.signal.org:443

# Content proxy backend
backend content_proxy
    mode tcp
    server content_proxy_server contentproxy.signal.org:443

# Uptime backend
backend uptime
    mode tcp
    server uptime_server uptime.signal.org:443

# Backup backend
backend backup
    mode tcp
    server backup_server api.backup.signal.org:443

# SFU backend
backend sfu
    mode tcp
    server sfu_server sfu.voip.signal.org:443

# Updates backends
backend updates
    mode tcp
    server updates_server updates.signal.org:443

backend updates2
    mode tcp
    server updates2_server updates2.signal.org:443